xlab('Day')
nyt_sum <-summarySE(nyt, measurevar="seconds", groupvars=c("twin"), na.rm=TRUE)
# Error bars represent standard error of the mean
ggplot(nyt_sum, aes(x=twin, y=seconds, fill=twin)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=seconds-se, ymax=seconds+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))+
theme_classic()+ scale_x_discrete(labels=c("Caitlyn", "Shannon"))+
scale_y_continuous(name="time to complete (seconds)")
nyt_sum <-summarySE(nyt, measurevar="seconds", groupvars=c("twin", "day"), na.rm=TRUE)
ggplot(nyt_sum, aes(x=factor(day, level=c("sun", "mon", "tues", "wed", "thur", "fri", "sat")), y=seconds, fill=twin)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=seconds-se, ymax=seconds+se),
width=.2,                    # Width of the error bars
position=position_dodge(.9))+
theme_classic()+
scale_y_continuous(name="time to complete (seconds)")+
xlab('Day')
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
kruskal.test(seconds ~ day + twins, data = nyt)
kruskal.test(seconds ~ day + twin, data = nyt)
kruskal.test(seconds ~  twin + day, data = nyt)
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  day , data = nyt)
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  day , data = nyt)
pairwise.wilcox.test(seconds ~  day,
p.adjust.method = "BH")
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  day , data = nyt)
pairwise.wilcox.test(nyt$seconds ~  nyt$day,
p.adjust.method = "BH")
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  day , data = nyt)
pairwise.wilcox.test(nyt$day, nyt$seconds,
p.adjust.method = "BH")
kruskal.test(seconds ~  twin , data = nyt)
kruskal.test(seconds ~  day , data = nyt)
pairwise.wilcox.test(nyt$seconds, nyt$day,
p.adjust.method = "BH")
# Fit a linear mixed effects model
model <- lmer(seconds ~ twin + day, data = nyt)
# Fit a linear mixed effects model
model <- lmer(seconds ~ twin + day (1 | 誰..date), data = data)
# Fit a linear mixed effects model
model <- lmer(seconds ~ twin + day (1 | 誰..date), data = nyt)
# Fit a linear mixed effects model
model <- lmer(seconds ~ twin + day + (1 | 誰..date), data = nyt)
# Print the model summary
summary(model)
# Fit a linear mixed effects model
model <- lmer(seconds ~ twin + day + (1 | 誰..date), data = nyt)
# Print the model summary
summary(model)
model
install.packages("multcomp")
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
library(multcomp)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
library(car)
leveneTest(seconds ~ twin + day,
data = nyt)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
library(car)
plot(res_aov, 2)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
plot(res_aov, 2)
# Extract the residuals
aov_residuals <- residuals(object = res_aov )
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals )
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
plot(res_aov, 2)
# Extract the residuals
aov_residuals <- residuals(object = res_aov )
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals )
kruskal.test(seconds ~ tin + day, data = nyt)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
plot(res_aov, 2)
# Extract the residuals
aov_residuals <- residuals(object = res_aov )
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals )
kruskal.test(seconds ~ twin + day, data = nyt)
res_aov <- aov(seconds ~ twin + day,
data = nyt
)
summary(res_aov)
TukeyHSD(res_aov, conf.level=.95)
plot(TukeyHSD(res_aov, conf.level=.95), las = 2)
plot(res_aov, 1)
plot(res_aov, 2)
# Extract the residuals
aov_residuals <- residuals(object = res_aov )
# Run Shapiro-Wilk test
shapiro.test(x = aov_residuals )
kruskal.test(seconds ~  day, data = nyt)
install.packages("writexl")
knitr::opts_chunk$set(echo = FALSE)
library(lme4)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(pillar) ##for tibbles
library(tidyverse)
library(ggpubr)
library(extrafont)
library(boot) # used for bootstrapping
library(gganimate) #animated graphs
library(gifski) #for saving gifs
library(sjPlot) #for tables of models
library(performance)
flower_types <- data.frame(ID = c("Flower A", "Flower B", "Flower C (Phantom)"),
conc = c(50, 15, 50),
length = c(100, 45, 45))
knitr::kable(flower_types,
col.names = c("Flower", "Concentration (%w/w)", "Tube length (mm)"),
caption = "Flower set up for experiment")
raw_testing <- read.csv("../Data/raw_testing.csv")
proportion_graph <- read.csv("../Data/proportion_graph.csv")
na.omit(raw_testing$first_non_phantom_choice)
options(tibble.print_max = Inf)
options(pillar.min_chars = Inf) #stop columns from truncating words
raw_testing %>%
group_by(treatment, date_bee_id)%>%
distinct(date_bee_id, .keep_all=TRUE, width = Inf)
#NOTE: currently set to include = FALSE as it's not necessary for sending round summaries
binary_talk <- data.frame(choice =c("50l", "15s"),
mean = c(0.392385726, 0.607614274),
se = c(0.035245106, 0.035245106),
frame=rep('binary_talk',2))
phantom_talk <- data.frame(choice = c("50l", "15s"),
mean =c(0.382022518, 0.617977482),
se = c(0.047488585, 0.047488585),
frame=rep('phantom_talk',2))
data <- rbind(binary_talk, phantom_talk)
ggplot(phantom_talk, aes(x=choice, y=mean)) +
geom_bar(stat='identity', width = 0.5, fill ="#F8D66C" ) +
geom_errorbar( aes(x=choice, ymin=mean-se, ymax=mean+se), width=0.1, colour="#FF5B4F", alpha=0.9, size=1.3)+
theme(
plot.background = element_rect(fill = "#FDFCF0"),
axis.text.y = element_text(size = 15),
axis.text.x = element_text(size = 20),
axis.title.y=element_text(size = 20),
axis.title.x=element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black",
size = 0.5, linetype = "solid"))+
scale_y_continuous(name ="Proportion of visits to flower", limits = c(0,1), expand = c(0, 0))+
scale_x_discrete(labels=c("15% (w/w), long tube","50%(w/w) short tube")+
coord_flip())
ggplot(binary_talk, aes(x=choice, y=mean)) +
geom_bar(stat='identity', width = 0.5, fill ="#FF5B4F" ) +
geom_errorbar( aes(x=choice, ymin=mean-se, ymax=mean+se), width=0.1, colour="#F8D66C", alpha=0.9, size=1.3)+
theme(
plot.background = element_rect(fill = "#FDFCF0"),
axis.text.y = element_text(size = 15),
axis.text.x = element_text(size = 20),
axis.title.y=element_text(size = 20),
axis.title.x=element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black",
size = 0.5, linetype = "solid"))+
scale_y_continuous(name ="Proportion of visits to flower", limits = c(0,1), expand = c(0, 0))+
scale_x_discrete(labels=c("15% (w/w), long tube","50%(w/w) short tube")+
coord_flip())
ggplot(data, aes(x=choice, y=mean)) +
geom_bar(stat='identity', width = 0.5, fill ="#f6bf16" ) +
geom_errorbar( aes(x=choice, ymin=mean-se, ymax=mean+se), width=0.1, colour="#b1731c", alpha=0.9, size=1.3)+
theme(
axis.text.y = element_text(size = 15),
axis.text.x = element_text(size = 20),
axis.title.y=element_text(size = 20),
axis.title.x=element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black",
size = 0.1, linetype = "solid"))+
scale_y_continuous(name ="Proportion of visits to flower", limits = c(0,1), expand = c(0, 0))+
scale_x_discrete(labels=c("15% (w/w), long tube","50%(w/w) short tube"))+
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
#rbind for animations
#create graphs
##recolour to combee theme
positions <- c("50l", "15s")
p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))%>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
p2 <-  raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))%>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = '#FBC549')+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
scale_y_continuous(name = "Proportion of visits to flowers")+
theme_classic()+
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
ylim(0, 1)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
View(raw_testing)
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <- ggplot(aes(x = first_non_phantom_choice, y = freq,  raw_testing_p1))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <- ggplot(aes(x = first_non_phantom_choice, y = freq, data= raw_testing_p1))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
p2 <-  raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))%>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = '#FBC549')+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
scale_y_continuous(name = "Proportion of visits to flowers")+
theme_classic()+
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
ylim(0, 1)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
View(raw_testing_p1)
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
raw_testing_p2 <-   filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
raw_testing_p2 <-
raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p2 <-  raw_testing_p2 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = '#FBC549')+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
scale_y_continuous(name = "Proportion of visits to flowers")+
theme_classic()+
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
ylim(0, 1)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
View(raw_testing_p2)
write_xlsx(raw_testing_p2,"~/GitHub/proj_apid_dance/raw_testing_p2.xlsx")
library(writexl)
write_xlsx(raw_testing_p2,"~/GitHub/proj_apid_dance/raw_testing_p2.xlsx")
write_xlsx(raw_testing_p2,"~/GitHub/proj_apis_dance/raw_testing_p2.xlsx")
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
raw_testing_p2 <-
raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
#write_xlsx(raw_testing_p2,"~/GitHub/proj_apis_dance/raw_testing_p2.xlsx")### Excel table to manually re add bees that got zeros which aren't in the dataset only needed for this treatment
training_summary<- read.csv("raw_testing_p2.csv") ### get the edited version
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
raw_testing_p2 <-
raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
#write_xlsx(raw_testing_p2,"~/GitHub/proj_apis_dance/raw_testing_p2.xlsx")### Excel table to manually re add bees that got zeros which aren't in the dataset only needed for this treatment
raw_testing_p2<- read.csv("raw_testing_p2.csv") ### get the edited version
positions <- c("50l", "15s")
raw_testing_p1 <-  raw_testing %>%
filter(treatment %in% c("binary"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
p1 <-
raw_testing_p1 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = "#FBC549")+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
theme_classic() +
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
scale_y_continuous(name = "Proportion of visits to flowers")+
ylim(0, 1)
raw_testing_p2 <-
raw_testing %>%
filter(treatment %in% c("phantom"))%>%
filter(!is.na(first_non_phantom_choice)) %>%
group_by(date_bee_id, treatment, first_non_phantom_choice) %>%
summarise(n = n()) %>%
mutate(freq = n / sum(n))
#write_xlsx(raw_testing_p2,"~/GitHub/proj_apis_dance/raw_testing_p2.xlsx")### Excel table to manually re add bees that got zeros which aren't in the dataset only needed for this treatment
raw_testing_p2<- read.csv("raw_testing_p2.csv") ### get the edited version
p2 <-  raw_testing_p2 %>%
ggplot(aes(x = first_non_phantom_choice, y = freq))+
geom_boxplot(fill = '#FBC549')+
geom_point(alpha = 0.1, position=position_jitter(height=.5, width=.5))+
scale_y_continuous(name = "Proportion of visits to flowers")+
theme_classic()+
ylab("Proportion of flowers visited")+
xlab("Flower types")+
scale_x_discrete(labels=c("50l" = "A", "15s" = "B"), limits = positions)+
ylim(0, 1)
ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
ar <-   ggarrange(p1, p2, ncol = 2, nrow = 1, labels = c("A", "B"),
common.legend = TRUE, legend = "bottom")
ar
setwd("~/GitHub/proj_insectcollections_employer")
